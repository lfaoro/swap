// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: swap/v1/main.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoinService_ListCoins_FullMethodName  = "/swap.v1.CoinService/ListCoins"
	CoinService_SwapRate_FullMethodName   = "/swap.v1.CoinService/SwapRate"
	CoinService_SwapTrade_FullMethodName  = "/swap.v1.CoinService/SwapTrade"
	CoinService_SwapStatus_FullMethodName = "/swap.v1.CoinService/SwapStatus"
)

// CoinServiceClient is the client API for CoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinServiceClient interface {
	ListCoins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CoinList, error)
	SwapRate(ctx context.Context, in *SwapRateRequest, opts ...grpc.CallOption) (*SwapRateResponse, error)
	SwapTrade(ctx context.Context, in *SwapTradeRequest, opts ...grpc.CallOption) (*SwapTradeResponse, error)
	SwapStatus(ctx context.Context, in *SwapStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwapStatusResponse], error)
}

type coinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinServiceClient(cc grpc.ClientConnInterface) CoinServiceClient {
	return &coinServiceClient{cc}
}

func (c *coinServiceClient) ListCoins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CoinList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CoinList)
	err := c.cc.Invoke(ctx, CoinService_ListCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) SwapRate(ctx context.Context, in *SwapRateRequest, opts ...grpc.CallOption) (*SwapRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapRateResponse)
	err := c.cc.Invoke(ctx, CoinService_SwapRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) SwapTrade(ctx context.Context, in *SwapTradeRequest, opts ...grpc.CallOption) (*SwapTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapTradeResponse)
	err := c.cc.Invoke(ctx, CoinService_SwapTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinServiceClient) SwapStatus(ctx context.Context, in *SwapStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwapStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CoinService_ServiceDesc.Streams[0], CoinService_SwapStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SwapStatusRequest, SwapStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoinService_SwapStatusClient = grpc.ServerStreamingClient[SwapStatusResponse]

// CoinServiceServer is the server API for CoinService service.
// All implementations must embed UnimplementedCoinServiceServer
// for forward compatibility.
type CoinServiceServer interface {
	ListCoins(context.Context, *emptypb.Empty) (*CoinList, error)
	SwapRate(context.Context, *SwapRateRequest) (*SwapRateResponse, error)
	SwapTrade(context.Context, *SwapTradeRequest) (*SwapTradeResponse, error)
	SwapStatus(*SwapStatusRequest, grpc.ServerStreamingServer[SwapStatusResponse]) error
	mustEmbedUnimplementedCoinServiceServer()
}

// UnimplementedCoinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoinServiceServer struct{}

func (UnimplementedCoinServiceServer) ListCoins(context.Context, *emptypb.Empty) (*CoinList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoins not implemented")
}
func (UnimplementedCoinServiceServer) SwapRate(context.Context, *SwapRateRequest) (*SwapRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapRate not implemented")
}
func (UnimplementedCoinServiceServer) SwapTrade(context.Context, *SwapTradeRequest) (*SwapTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapTrade not implemented")
}
func (UnimplementedCoinServiceServer) SwapStatus(*SwapStatusRequest, grpc.ServerStreamingServer[SwapStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SwapStatus not implemented")
}
func (UnimplementedCoinServiceServer) mustEmbedUnimplementedCoinServiceServer() {}
func (UnimplementedCoinServiceServer) testEmbeddedByValue()                     {}

// UnsafeCoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinServiceServer will
// result in compilation errors.
type UnsafeCoinServiceServer interface {
	mustEmbedUnimplementedCoinServiceServer()
}

func RegisterCoinServiceServer(s grpc.ServiceRegistrar, srv CoinServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoinService_ServiceDesc, srv)
}

func _CoinService_ListCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).ListCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_ListCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).ListCoins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_SwapRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).SwapRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_SwapRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).SwapRate(ctx, req.(*SwapRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_SwapTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinServiceServer).SwapTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinService_SwapTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinServiceServer).SwapTrade(ctx, req.(*SwapTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinService_SwapStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwapStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoinServiceServer).SwapStatus(m, &grpc.GenericServerStream[SwapStatusRequest, SwapStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoinService_SwapStatusServer = grpc.ServerStreamingServer[SwapStatusResponse]

// CoinService_ServiceDesc is the grpc.ServiceDesc for CoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swap.v1.CoinService",
	HandlerType: (*CoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoins",
			Handler:    _CoinService_ListCoins_Handler,
		},
		{
			MethodName: "SwapRate",
			Handler:    _CoinService_SwapRate_Handler,
		},
		{
			MethodName: "SwapTrade",
			Handler:    _CoinService_SwapTrade_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SwapStatus",
			Handler:       _CoinService_SwapStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "swap/v1/main.proto",
}
